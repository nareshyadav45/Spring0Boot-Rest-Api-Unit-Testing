package com.unit.test.rest.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;

import com.unit.test.rest.entities.Book;
import com.unit.test.rest.optional.practice.exception.userNotFoundException;
import com.unit.test.rest.repositories.BookRepository;

//@RunWith(MockitoJUnitRunner.class)
@ExtendWith(MockitoExtension.class)
public class BookServiceClassTest {

	@Mock
	private BookRepository bookRepository;
	
	@InjectMocks
	private BookService bookService;
	
	public Book createBookObject() {
		Book b=new Book(1l,"mybook","naresh");
		return b;
	}
	
	@Test
	public void addBookTest() {
		when(bookRepository.save(createBookObject())).thenReturn(createBookObject());
		Book actual = bookService.addBook(createBookObject());
		assertEquals(createBookObject().getTitle(), actual.getTitle()); 
	}
	
	@Test
	public void getBookByIdTest() {
		when(bookRepository.findById(ArgumentMatchers.anyLong())).thenReturn(Optional.of(createBookObject()));
		Optional<Book> actualBook = bookService.getBookById(ArgumentMatchers.anyLong());
		//assertEquals(createBookObject().getAuthor(),actualBook.get().getAuthor());
		assertEquals(createBookObject(), actualBook);
		assertEquals(createBookObject().getId(), actualBook.get().getId());
	}
	
	
}
